{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"RegistrationPage\",\n\n  data() {\n    return {\n      firstName: '',\n      lastName: '',\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      address: '',\n      city: '',\n      country: '',\n      validNumber: '',\n      phoneNum: null,\n      registrationReason: '',\n      role: 'addClient'\n    };\n  },\n\n  mounted() {\n    this.$root.signUp = false;\n    this.$root.signIn = false;\n  },\n\n  methods: {\n    signUp() {\n      var regExp = /^[A-Za-z]+$/;\n\n      if (this.firstName.length < 2 || this.firstName.length > 20) {\n        this.$toast.error(\"First name must be between 2-20 characters\");\n        return;\n      }\n\n      if (regExp.test(this.firstName) == false) {\n        this.$toast.error(\"First name must contain only letters\");\n        return;\n      }\n\n      this.firstName = this.firstName.charAt(0).toUpperCase() + this.firstName.slice(1);\n\n      if (this.lastName.length < 2 || this.lastName.length > 20) {\n        this.$toast.error(\"Last name must be between 2-20 characters\");\n        return;\n      }\n\n      if (regExp.test(this.lastName) == false) {\n        this.$toast.error(\"Last name must contain only letters\");\n        return;\n      }\n\n      this.lastName = this.lastName.charAt(0).toUpperCase() + this.lastName.slice(1);\n\n      if (this.email.length < 5 || this.validateEmail(this.email) == false) {\n        this.$toast.error(\"Invalid email\");\n        return;\n      }\n\n      this.email.toLowerCase();\n      var passwordRegex = /^[0-9A-Za-z]+$/;\n\n      if (this.username.length < 3 || this.username.length > 20) {\n        this.$toast.error(\"Username must be between 3-20 characters\");\n        return;\n      }\n\n      if (!passwordRegex.test(this.username)) {\n        this.$toast.error(\"Username must only contain letters and numbers\");\n        return;\n      }\n\n      if (this.password.length < 5 || this.password.length > 20) {\n        this.$toast.error(\"Password must be between 5-20 characters\");\n        return;\n      }\n\n      if (!passwordRegex.test(this.password)) {\n        this.$toast.error(\"Password must only contain letters and numbers\");\n        return;\n      }\n\n      if (this.password !== this.confirmPassword) {\n        this.$toast.error(\"Passwords must match\");\n        return;\n      }\n\n      if (this.address === '') {\n        this.$toast.error(\"Provide address\");\n        return;\n      }\n\n      if (this.city === '') {\n        this.$toast.error(\"Provide city name\");\n        return;\n      }\n\n      if (this.country == \"\") {\n        this.$toast.error(\"Provide country\");\n        return;\n      }\n\n      if (this.validNumber === '') {\n        this.$toast.error(\"Phone number invalid\");\n        return;\n      }\n\n      if (this.role !== 'addClient' && this.registrationReason === '') {\n        this.$toast.error(\"Provide a reason for registering\");\n        return;\n      }\n\n      axios.get(`api/auth/isMailAvailable/${this.email}`).then(response => {\n        if (response.data == false) {\n          this.$toast.error(\"Email already taken\");\n          return;\n        } else {\n          axios.get(`api/auth/isUsernameAvailable/${this.username}`).then(response => {\n            if (response.data == false) {\n              this.$toast.error(\"Username already taken\");\n              return;\n            } else {\n              const user = {\n                'firstName': this.firstName,\n                'lastName': this.lastName,\n                'username': this.username,\n                'email': this.email,\n                'password': this.password,\n                \"confirmPassword\": this.confirmPassword,\n                'address': this.address,\n                'city': this.city,\n                'country': this.country,\n                'phoneNum': this.validNumber\n              };\n\n              if (this.role !== \"addClient\") {\n                user.registrationReason = this.registrationReason;\n              }\n\n              axios.post(`/api/auth/${this.role}`, user).then(response => {\n                if (response.data == false) {\n                  this.$toast.error(\"Registration failed\");\n                } else {\n                  this.$toast.success(\"Registration successful\");\n                  this.$root.signUp = true;\n                  this.$router.push(\"/\");\n                }\n              });\n            }\n          });\n        }\n      });\n    },\n\n    telValidate(phoneNum) {\n      if (phoneNum.valid) {\n        this.validNumber = phoneNum.number;\n      } else {\n        this.validNumber = '';\n      }\n    },\n\n    validateEmail(email) {\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(email);\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","name","data","firstName","lastName","username","email","password","confirmPassword","address","city","country","validNumber","phoneNum","registrationReason","role","mounted","$root","signUp","signIn","methods","regExp","length","$toast","error","test","charAt","toUpperCase","slice","validateEmail","toLowerCase","passwordRegex","get","then","response","user","post","success","$router","push","telValidate","valid","number","re"],"sourceRoot":"","sources":["C:\\Users\\draga\\OneDrive\\Dokumenti\\MRS-ISA-PROJEKAT\\mrs-isa-projekat\\projekat\\src\\frontend\\src\\components\\RegistrationPage.vue"],"sourcesContent":["<template>\r\n  <div align='center'>\r\n    <div class=\"registration-div mt-3 mb-3\">\r\n      <div class=\"radio-div\">\r\n        <div>\r\n          <input class=\"radio\" type=\"radio\" id=\"addClient\" name=\"choice\" value=\"addClient\" v-model=\"role\" checked>\r\n          <label class=\"custom-btn button-primary input-group-width mb-2 mt-5\" for=\"addClient\">Client</label>\r\n        </div>\r\n        <div>\r\n          <input class=\"radio\" type=\"radio\" id=\"addVacationHouseOwner\" name=\"choice\" value=\"addVacationHouseOwner\" v-model=\"role\">\r\n          <label class=\"custom-btn button-primary input-group-width mb-2\" for=\"addVacationHouseOwner\">Vacation House Owner</label>\r\n        </div>\r\n        <div>\r\n          <input class=\"radio\" type=\"radio\" id=\"addShipOwner\" name=\"choice\" value=\"addShipOwner\" v-model=\"role\">\r\n          <label class=\"custom-btn button-primary input-group-width mb-2\" for=\"addShipOwner\">Ship Owner</label>\r\n        </div>\r\n        <div>\r\n          <input class=\"radio\" type=\"radio\" id=\"addFishingInstructor\" name=\"choice\" value=\"addFishingInstructor\" v-model=\"role\">\r\n          <label class=\"custom-btn button-primary input-group-width mb-4\" for=\"addFishingInstructor\">Fishing Instructor</label>\r\n        </div>\r\n      </div>\r\n      <form class=\"w-100\"  @submit.prevent=\"signUp\">\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"firstNameInput\" class=\"form-control\" type=\"text\" v-model=\"firstName\" placeholder=\"First Name\">\r\n          <label for=\"firstNameInput\">First Name</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"lastNameInput\" class=\"form-control\" type=\"text\" v-model=\"lastName\" placeholder=\"Last Name\">\r\n          <label for=\"lastNameInput\">Last Name</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"emailInput\" class=\"form-control\" type=\"text\" v-model=\"email\" @blur=\"validateEmail\" placeholder=\"E-mail\">\r\n          <label for=\"emailInput\">E-mail</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"usernameInput\" class=\"form-control\" type=\"text\" v-model=\"username\" placeholder=\"Username\">\r\n          <label for=\"usernameInput\">Username</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"passwordInput\" class=\"form-control\" type=\"password\" v-model=\"password\" placeholder=\"Password\">\r\n          <label for=\"passwordInput\">Password</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"confirmPasswordInput\" class=\"form-control\" type=\"password\" v-model=\"confirmPassword\" placeholder=\"Confirm Password\">\r\n          <label for=\"confirmPasswordInput\">Confirm Password</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"addressInput\" class=\"form-control\" type=\"text\" v-model=\"address\" placeholder=\"Address\">\r\n          <label for=\"addressInput\">Address</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <input id=\"cityInput\" class=\"form-control\" type=\"text\" v-model=\"city\" placeholder=\"City\">\r\n          <label for=\"cityInput\">City</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <country-select id=\"countryInput\" class=\"form-control\" v-model=\"country\" :usei18n=\"false\" :autocomplete=\"true\"  :countryName=\"true\"/>\r\n          <label for=\"countryInput\">Country</label>\r\n        </div>\r\n        <div class=\"form-floating input-group-width mb-2\">\r\n          <vue-tel-input id=\"phoneNumInput\" class=\"form-control\" v-model=\"phoneNum\" @validate=\"telValidate\"></vue-tel-input>\r\n          <label for=\"phoneNumInput\">Phone Number</label>\r\n        </div>\r\n        <div v-if=\"role!=='addClient'\" class=\"form-floating input-group-width\">\r\n          <textarea id=\"reasonInput\" class=\"form-control\" v-model=\"registrationReason\"></textarea>\r\n          <label for=\"reasonInput\">Reason for Registration</label>\r\n        </div>\r\n\r\n        <div>\r\n          <button class=\"custom-btn button-secondary input-group-width mb-4 mt-5\">Sign up</button>\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n  </div>\r\n  \r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\nimport axios from \"axios\"\r\n\r\n\r\nexport default {\r\n  name: \"RegistrationPage\",\r\n  \r\n\r\n  data() {\r\n    return{\r\n      \r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      confirmPassword: '',\r\n      address: '',\r\n      city: '',\r\n      country: '',\r\n      validNumber: '',\r\n      phoneNum: null,\r\n      registrationReason: '',\r\n\r\n      role: 'addClient'\r\n    }\r\n\r\n  },\r\n  mounted(){\r\n    this.$root.signUp=false;\r\n    this.$root.signIn=false;\r\n  },\r\n  methods:{\r\n    signUp() {\r\n      var regExp = /^[A-Za-z]+$/;\r\n      \r\n      if (this.firstName.length < 2 || this.firstName.length > 20) {\r\n        this.$toast.error(\"First name must be between 2-20 characters\");\r\n        return;\r\n        }\r\n      if(regExp.test(this.firstName)==false){\r\n        this.$toast.error(\"First name must contain only letters\");\r\n        return;\r\n      }\r\n      this.firstName=this.firstName.charAt(0).toUpperCase() + this.firstName.slice(1);\r\n      \r\n      if(this.lastName.length < 2 || this.lastName.length > 20){\r\n        this.$toast.error(\"Last name must be between 2-20 characters\");\r\n        return;\r\n      }\r\n      if(regExp.test(this.lastName)==false){\r\n        this.$toast.error(\"Last name must contain only letters\");\r\n        return;\r\n      }     \r\n      this.lastName=this.lastName.charAt(0).toUpperCase() + this.lastName.slice(1);\r\n      if (this.email.length<5 || this.validateEmail(this.email)==false) {\r\n         this.$toast.error(\"Invalid email\");\r\n         return;     \r\n      }\r\n      this.email.toLowerCase();\r\n\r\n      var passwordRegex=/^[0-9A-Za-z]+$/;\r\n\r\n      \r\n\r\n\r\n      if(this.username.length<3 || this.username.length > 20){\r\n        this.$toast.error(\"Username must be between 3-20 characters\");\r\n        return;\r\n      }\r\n      if(!passwordRegex.test(this.username)){\r\n        this.$toast.error(\"Username must only contain letters and numbers\");\r\n        return;\r\n      }\r\n      \r\n      if(this.password.length<5 || this.password.length > 20){\r\n        this.$toast.error(\"Password must be between 5-20 characters\");\r\n        return;\r\n      }\r\n      if(!passwordRegex.test(this.password)){\r\n        this.$toast.error(\"Password must only contain letters and numbers\");\r\n        return;\r\n      }\r\n      if(this.password !== this.confirmPassword){\r\n        this.$toast.error(\"Passwords must match\");\r\n        return;\r\n      }\r\n      if(this.address === ''){\r\n        this.$toast.error(\"Provide address\");\r\n        return;\r\n      }\r\n      if(this.city === ''){\r\n        this.$toast.error(\"Provide city name\");\r\n        return;\r\n      }\r\n\r\n      if(this.country == \"\"){\r\n        this.$toast.error(\"Provide country\");\r\n        return;\r\n      }\r\n      \r\n      if(this.validNumber===''){\r\n        this.$toast.error(\"Phone number invalid\");\r\n        return;\r\n      }\r\n\r\n      if(this.role !== 'addClient' && this.registrationReason === '') {\r\n        this.$toast.error(\"Provide a reason for registering\");\r\n        return;\r\n      }\r\n      \r\n      axios.get(`api/auth/isMailAvailable/${this.email}`).then(response => {\r\n        if(response.data==false){\r\n          this.$toast.error(\"Email already taken\");\r\n          return;\r\n        }\r\n        else{\r\n \r\n          axios.get(`api/auth/isUsernameAvailable/${this.username}`).then(response => {\r\n     \r\n            if(response.data==false){\r\n              this.$toast.error(\"Username already taken\");\r\n              return;\r\n            }else{\r\n                const user={'firstName':this.firstName,'lastName':this.lastName,'username':this.username,'email':this.email,'password':this.password,\"confirmPassword\":this.confirmPassword,\r\n                'address':this.address,'city':this.city,'country':this.country,'phoneNum':this.validNumber};\r\n\r\n                if (this.role !== \"addClient\") {\r\n                  user.registrationReason = this.registrationReason;\r\n                }\r\n\r\n                axios.post(`/api/auth/${this.role}`, user).then(response => {\r\n                  if(response.data==false){\r\n                    this.$toast.error(\"Registration failed\");\r\n                  }else{\r\n                    this.$toast.success(\"Registration successful\");\r\n                    this.$root.signUp=true;\r\n                    this.$router.push(\"/\");\r\n                  }\r\n                });\r\n\r\n            }\r\n          \r\n          })         \r\n          \r\n        }\r\n        });\r\n    \r\n            \r\n     \r\n    },\r\n    telValidate(phoneNum) {\r\n      if (phoneNum.valid) {\r\n        this.validNumber = phoneNum.number;\r\n      } else {\r\n        this.validNumber = '';\r\n      } \r\n    },\r\n    validateEmail(email){\r\n      var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;      \r\n      return re.test(email);\r\n\r\n    },\r\n  \r\n    }}\r\n</script>\r\n\r\n<style>\r\nform {\r\n  width:400px;\r\n  margin:20px auto;\r\n}\r\n\r\n.radio {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.registration-div {\r\n  margin-top: 0;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  width: 45%;\r\n  background-color: #00587a;\r\n  align-content: center;\r\n}\r\n\r\n.input-group-width {\r\n  width: 70%;\r\n  margin: auto;\r\n}\r\n\r\n[type=radio]:checked + label {\r\n  background-color: #004661;\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}