{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"newPasswordPage\",\n  data: () => {\n    return {\n      newPassword: \"\",\n      confirmPassword: \"\",\n      token: \"\"\n    };\n  },\n\n  mounted() {\n    this.token = this.$route.params.token;\n  },\n\n  methods: {\n    setNewPassword() {\n      var passwordRegex = /^[0-9A-Za-z]+$/;\n\n      if (this.newPassword.length < 5 || this.newPassword.length > 20) {\n        this.$toast.error(\"Password must be between 5-20 characters\");\n        return;\n      }\n\n      if (!passwordRegex.test(this.newPassword)) {\n        this.$toast.error(\"Password must only contain letters and numbers\");\n        return;\n      }\n\n      if (this.newPassword !== this.confirmPassword) {\n        this.$toast.error(\"Passwords must match\");\n        return;\n      }\n\n      const passwordResetDTO = {\n        \"token\": this.token,\n        \"newPassword\": this.newPassword,\n        \"confirmPassword\": this.confirmPassword\n      };\n      axios.put(\"/api/auth/resetPassword\", passwordResetDTO).then(response => {\n        if (response.data == true) {\n          this.$toast.success(\"Password changed successfully\");\n          this.$router.push(\"/loginPage\");\n        } else {\n          this.$toast.error(\"Error\");\n        }\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAaA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;AACbC,MAAI,EAAE,iBADO;AAEbC,MAAI,EAAE,MAAM;AACV,WAAO;AACLC,iBAAW,EAAE,EADR;AAELC,qBAAe,EAAE,EAFZ;AAGLC,WAAK,EAAC;AAHD,KAAP;AAKD,GARY;;AASbC,SAAO,GAAE;AACP,SAAKD,KAAL,GAAW,KAAKE,MAAL,CAAYC,MAAZ,CAAmBH,KAA9B;AACD,GAXY;;AAYbI,SAAO,EAAC;AACNC,kBAAc,GAAE;AACd,UAAIC,aAAa,GAAC,gBAAlB;;AAEA,UAAG,KAAKR,WAAL,CAAiBS,MAAjB,GAAwB,CAAxB,IAA6B,KAAKT,WAAL,CAAiBS,MAAjB,GAA0B,EAA1D,EAA6D;AAC3D,aAAKC,MAAL,CAAYC,KAAZ,CAAkB,0CAAlB;AACA;AACF;;AACA,UAAG,CAACH,aAAa,CAACI,IAAd,CAAmB,KAAKZ,WAAxB,CAAJ,EAAyC;AACvC,aAAKU,MAAL,CAAYC,KAAZ,CAAkB,gDAAlB;AACA;AACF;;AACA,UAAG,KAAKX,WAAL,KAAqB,KAAKC,eAA7B,EAA6C;AAC3C,aAAKS,MAAL,CAAYC,KAAZ,CAAkB,sBAAlB;AACA;AACF;;AACA,YAAME,gBAAgB,GAAC;AACrB,iBAAQ,KAAKX,KADQ;AAErB,uBAAc,KAAKF,WAFE;AAGrB,2BAAkB,KAAKC;AAHF,OAAvB;AAMAJ,WAAK,CAACiB,GAAN,CAAU,yBAAV,EAAoCD,gBAApC,EAAsDE,IAAtD,CAA2DC,QAAO,IAAI;AACpE,YAAGA,QAAQ,CAACjB,IAAT,IAAe,IAAlB,EAAuB;AACrB,eAAKW,MAAL,CAAYO,OAAZ,CAAoB,+BAApB;AACA,eAAKC,OAAL,CAAaC,IAAb,CAAkB,YAAlB;AACD,SAHD,MAGK;AACH,eAAKT,MAAL,CAAYC,KAAZ,CAAkB,OAAlB;AAEF;AACD,OARD;AAWF;;AAjCM;AAZK,CAAf","names":["axios","name","data","newPassword","confirmPassword","token","mounted","$route","params","methods","setNewPassword","passwordRegex","length","$toast","error","test","passwordResetDTO","put","then","response","success","$router","push"],"sourceRoot":"","sources":["C:\\Users\\draga\\OneDrive\\Dokumenti\\MRS-ISA-PROJEKAT\\mrs-isa-projekat\\projekat\\src\\frontend\\src\\components\\NewPasswordPage.vue"],"sourcesContent":["<template>\r\n  <div align='center'>\r\n    <br>\r\n    <input type=\"password\" v-model=\"newPassword\" placeholder=\"New password\">\r\n    <br><br>\r\n    <input type=\"password\" v-model=\"confirmPassword\" placeholder=\"Confirm password\">\r\n    <br><br>\r\n    <button class=\"btn btn-primary\" @click=\"setNewPassword()\">Set new password</button>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"\r\nexport default {\r\n  name: \"newPasswordPage\",\r\n  data: () => {\r\n    return {\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n      token:\"\",\r\n    };\r\n  },\r\n  mounted(){\r\n    this.token=this.$route.params.token;\r\n  },\r\n  methods:{\r\n    setNewPassword(){\r\n      var passwordRegex=/^[0-9A-Za-z]+$/;\r\n\r\n      if(this.newPassword.length<5 || this.newPassword.length > 20){\r\n        this.$toast.error(\"Password must be between 5-20 characters\");\r\n        return;\r\n      }\r\n      if(!passwordRegex.test(this.newPassword)){\r\n        this.$toast.error(\"Password must only contain letters and numbers\");\r\n        return;\r\n      }\r\n      if(this.newPassword !== this.confirmPassword){\r\n        this.$toast.error(\"Passwords must match\");\r\n        return;\r\n      }\r\n      const passwordResetDTO={\r\n        \"token\":this.token,\r\n        \"newPassword\":this.newPassword,\r\n        \"confirmPassword\":this.confirmPassword\r\n      }\r\n\r\n      axios.put(\"/api/auth/resetPassword\",passwordResetDTO).then(response =>{\r\n        if(response.data==true){\r\n          this.$toast.success(\"Password changed successfully\");\r\n          this.$router.push(\"/loginPage\");\r\n        }else{\r\n          this.$toast.error(\"Error\");\r\n          \r\n        }\r\n      })\r\n\r\n      \r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}