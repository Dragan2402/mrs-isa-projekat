{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data: () => {\n    return {\n      username: \"\",\n      password: \"\"\n    };\n  },\n\n  mounted() {\n    this.$root.signIn = false;\n  },\n\n  methods: {\n    login() {\n      var regex = /^[0-9A-Za-z]+$/;\n\n      if (this.username.length < 3 || this.username.length > 20) {\n        this.$toast.error(\"Username must be between 3-20 characters\");\n        return;\n      }\n\n      if (!regex.test(this.username)) {\n        this.$toast.error(\"Username must only contain letters and numbers\");\n        return;\n      }\n\n      if (this.password.length < 5 || this.password.length > 20) {\n        this.$toast.error(\"Password must be between 5-20 characters\");\n        return;\n      }\n\n      if (!regex.test(this.password)) {\n        this.$toast.error(\"Password must only contain letters and numbers\");\n        return;\n      }\n\n      const loginHeaders = {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n      const body = {\n        'username': this.username,\n        'password': this.password\n      };\n      axios.post(\"/api/auth/login\", body, loginHeaders).then(response => {\n        this.$root.accessToken = response.data.accessToken;\n        this.$root.signedIn = true;\n        localStorage.setItem(\"jwt\", response.data.accessToken);\n        this.$toast.success(\"Login successfull\");\n        axios.get(\"/api/users/loggedUser\", {\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"jwt\")}`\n          }\n        }).then(response => {\n          this.$root.loggedUser = response.data;\n          this.$root.accountType = response.data.accountType;\n          console.log(response.data.accountType);\n        });\n        axios.get(\"/api/users/loggedUser/picture\", {\n          headers: {\n            \"Authorization\": `Bearer ${localStorage.getItem(\"jwt\")}`\n          }\n        }).then(response => this.$root.loggedPicture = response.data);\n        this.$router.push(\"/\");\n      }).catch(error => {\n        if (error.response.status === 404) this.$toast.error(\"Account awaiting verification\");else this.$toast.error(\"Invalid Credentials\");\n        this.$root.signedIn = false;\n        this.$root.accessToken = null;\n        localStorage.setItem(\"jwt\", null);\n        console.log(error);\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;AACbC,MAAI,EAAE,MAAM;AACV,WAAO;AACLC,cAAQ,EAAE,EADL;AAELC,cAAQ,EAAE;AAFL,KAAP;AAID,GANY;;AAOXC,SAAO,GAAE;AACT,SAAKC,KAAL,CAAWC,MAAX,GAAkB,KAAlB;AAED,GAVY;;AAWbC,SAAO,EAAC;AACNC,SAAK,GAAE;AACL,UAAIC,KAAK,GAAC,gBAAV;;AACA,UAAG,KAAKP,QAAL,CAAcQ,MAAd,GAAqB,CAArB,IAA0B,KAAKR,QAAL,CAAcQ,MAAd,GAAuB,EAApD,EAAuD;AACrD,aAAKC,MAAL,CAAYC,KAAZ,CAAkB,0CAAlB;AACA;AACF;;AACA,UAAG,CAACH,KAAK,CAACI,IAAN,CAAW,KAAKX,QAAhB,CAAJ,EAA8B;AAC5B,aAAKS,MAAL,CAAYC,KAAZ,CAAkB,gDAAlB;AACA;AACF;;AACA,UAAG,KAAKT,QAAL,CAAcO,MAAd,GAAqB,CAArB,IAA0B,KAAKP,QAAL,CAAcO,MAAd,GAAuB,EAApD,EAAuD;AACrD,aAAKC,MAAL,CAAYC,KAAZ,CAAkB,0CAAlB;AACA;AACF;;AACA,UAAG,CAACH,KAAK,CAACI,IAAN,CAAW,KAAKV,QAAhB,CAAJ,EAA8B;AAC5B,aAAKQ,MAAL,CAAYC,KAAZ,CAAkB,gDAAlB;AACA;AACF;;AACA,YAAME,YAAW,GAAG;AACpB,kBAAU,kBADU;AAEpB,wBAAgB;AAFI,OAApB;AAIA,YAAMC,IAAG,GAAI;AACb,oBAAY,KAAKb,QADJ;AAEb,oBAAY,KAAKC;AAFJ,OAAb;AAKAH,WAAK,CAACgB,IAAN,CAAW,iBAAX,EAA6BD,IAA7B,EAAkCD,YAAlC,EAAgDG,IAAhD,CAAqDC,QAAO,IAAI;AAC9D,aAAKb,KAAL,CAAWc,WAAX,GAAuBD,QAAQ,CAACjB,IAAT,CAAckB,WAArC;AACA,aAAKd,KAAL,CAAWe,QAAX,GAAoB,IAApB;AAEAC,oBAAY,CAACC,OAAb,CAAqB,KAArB,EAA2BJ,QAAQ,CAACjB,IAAT,CAAckB,WAAzC;AACA,aAAKR,MAAL,CAAYY,OAAZ,CAAoB,mBAApB;AAEAvB,aAAK,CAACwB,GAAN,CAAU,uBAAV,EAAkC;AAAEC,iBAAO,EAAE;AAAC,6BAAmB,UAASJ,YAAY,CAACK,OAAb,CAAqB,KAArB,CAA4B;AAAzD;AAAX,SAAlC,EACKT,IADL,CACUC,QAAO,IAAK;AAChB,eAAKb,KAAL,CAAWsB,UAAX,GAAsBT,QAAQ,CAACjB,IAA/B;AACA,eAAKI,KAAL,CAAWuB,WAAX,GAAyBV,QAAQ,CAACjB,IAAT,CAAc2B,WAAvC;AACAC,iBAAO,CAACC,GAAR,CAAYZ,QAAQ,CAACjB,IAAT,CAAc2B,WAA1B;AACD,SALL;AAMA5B,aAAK,CAACwB,GAAN,CAAU,+BAAV,EAA0C;AAAEC,iBAAO,EAAE;AAAC,6BAAmB,UAASJ,YAAY,CAACK,OAAb,CAAqB,KAArB,CAA4B;AAAzD;AAAX,SAA1C,EAAoHT,IAApH,CAAyHC,QAAO,IAAM,KAAKb,KAAL,CAAW0B,aAAX,GAAyBb,QAAQ,CAACjB,IAAxK;AACA,aAAK+B,OAAL,CAAaC,IAAb,CAAkB,GAAlB;AAED,OAhBD,EAgBGC,KAhBH,CAgBUtB,KAAD,IAAW;AAClB,YAAGA,KAAK,CAACM,QAAN,CAAeiB,MAAf,KAA0B,GAA7B,EACE,KAAKxB,MAAL,CAAYC,KAAZ,CAAkB,+BAAlB,EADF,KAGE,KAAKD,MAAL,CAAYC,KAAZ,CAAkB,qBAAlB;AACF,aAAKP,KAAL,CAAWe,QAAX,GAAoB,KAApB;AACA,aAAKf,KAAL,CAAWc,WAAX,GAAuB,IAAvB;AACAE,oBAAY,CAACC,OAAb,CAAqB,KAArB,EAA2B,IAA3B;AACAO,eAAO,CAACC,GAAR,CAAalB,KAAb;AACD,OAzBD;AA4BF;;AAxDM;AAXK,CAAf","names":["axios","data","username","password","mounted","$root","signIn","methods","login","regex","length","$toast","error","test","loginHeaders","body","post","then","response","accessToken","signedIn","localStorage","setItem","success","get","headers","getItem","loggedUser","accountType","console","log","loggedPicture","$router","push","catch","status"],"sourceRoot":"","sources":["C:\\Users\\draga\\OneDrive\\Dokumenti\\MRS-ISA-PROJEKAT\\mrs-isa-projekat\\projekat\\src\\frontend\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    \r\n    <div align=\"center\">\r\n      <input v-model=\"username\" placeholder=\"username\" />\r\n      <br />\r\n      <br />\r\n      <input v-model=\"password\" placeholder=\"password\" type=\"password\" />\r\n      <br />\r\n      <br />\r\n      <button @click=\"login\">Login</button>\r\n      <div>\r\n        <p>\r\n          <router-link to=\"/forgotPasswordPage\">Forgot your password?</router-link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from \"axios\"\r\nexport default {\r\n  data: () => {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  },\r\n    mounted(){\r\n    this.$root.signIn=false;\r\n    \r\n  },\r\n  methods:{\r\n    login(){\r\n      var regex=/^[0-9A-Za-z]+$/;\r\n      if(this.username.length<3 || this.username.length > 20){\r\n        this.$toast.error(\"Username must be between 3-20 characters\");\r\n        return;\r\n      }\r\n      if(!regex.test(this.username)){\r\n        this.$toast.error(\"Username must only contain letters and numbers\");\r\n        return;\r\n      }\r\n      if(this.password.length<5 || this.password.length > 20){\r\n        this.$toast.error(\"Password must be between 5-20 characters\");\r\n        return;\r\n      }\r\n      if(!regex.test(this.password)){\r\n        this.$toast.error(\"Password must only contain letters and numbers\");\r\n        return;\r\n      }\r\n      const loginHeaders ={\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n      };\r\n      const body = {\r\n      'username': this.username,\r\n      'password': this.password\r\n      };\r\n      \r\n      axios.post(\"/api/auth/login\",body,loginHeaders).then(response =>{        \r\n        this.$root.accessToken=response.data.accessToken;\r\n        this.$root.signedIn=true;\r\n       \r\n        localStorage.setItem(\"jwt\",response.data.accessToken);\r\n        this.$toast.success(\"Login successfull\");   \r\n \r\n        axios.get(\"/api/users/loggedUser\",{ headers: {\"Authorization\" : `Bearer ${localStorage.getItem(\"jwt\")}`} })\r\n            .then(response => {\r\n              this.$root.loggedUser=response.data\r\n              this.$root.accountType = response.data.accountType;\r\n              console.log(response.data.accountType)\r\n            });\r\n        axios.get(\"/api/users/loggedUser/picture\",{ headers: {\"Authorization\" : `Bearer ${localStorage.getItem(\"jwt\")}`} }).then(response => (this.$root.loggedPicture=response.data));\r\n        this.$router.push(\"/\");  \r\n      \r\n      }).catch((error) => {\r\n        if(error.response.status === 404)\r\n          this.$toast.error(\"Account awaiting verification\");\r\n        else\r\n          this.$toast.error(\"Invalid Credentials\");\r\n        this.$root.signedIn=false;\r\n        this.$root.accessToken=null;\r\n        localStorage.setItem(\"jwt\",null);\r\n        console.log( error);\r\n      });\r\n    \r\n      \r\n    }\r\n\r\n  \r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}