{"ast":null,"code":"export default {\n  name: 'picture-input',\n  props: {\n    width: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    height: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    margin: {\n      type: [String, Number],\n      default: 0\n    },\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    size: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: [String, Number],\n      default: null\n    },\n    buttonClass: {\n      type: String,\n      default: 'btn btn-primary button'\n    },\n    removeButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    aspectButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    prefill: {\n      type: [String, File],\n      default: ''\n    },\n    prefillOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    crop: {\n      type: Boolean,\n      default: true\n    },\n    radius: {\n      type: [String, Number],\n      default: 0\n    },\n    removable: {\n      type: Boolean,\n      default: false\n    },\n    hideChangeButton: {\n      type: Boolean,\n      default: false\n    },\n    autoToggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    toggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    changeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 10000\n    },\n    alertOnError: {\n      type: Boolean,\n      default: true\n    },\n    customStrings: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n  watch: {\n    prefill() {\n      if (this.prefill) {\n        this.preloadImage(this.prefill, this.prefillOptions);\n      } else {\n        this.removeImage();\n      }\n    }\n\n  },\n\n  data() {\n    return {\n      imageSelected: false,\n      previewHeight: 0,\n      previewWidth: 0,\n      draggingOver: false,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      strings: {\n        upload: '<p>Your device does not support file uploading.</p>',\n        drag: 'Drag an image or <br>click here to select a file',\n        tap: 'Tap here to select a photo <br>from your gallery',\n        change: 'Change Photo',\n        aspect: 'Landscape/Portrait',\n        remove: 'Remove Photo',\n        select: 'Select a Photo',\n        selected: '<p>Photo successfully selected!</p>',\n        fileSize: 'The file size exceeds the limit',\n        fileType: 'This file type is not supported.'\n      }\n    };\n  },\n\n  mounted() {\n    this.updateStrings();\n\n    if (this.prefill) {\n      this.preloadImage(this.prefill, this.prefillOptions);\n    }\n\n    this.$nextTick(() => {\n      window.addEventListener('resize', this.onResize);\n      this.onResize();\n    });\n\n    if (this.supportsPreview) {\n      this.pixelRatio = Math.round(window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI);\n      const canvas = this.$refs.previewCanvas;\n\n      if (canvas.getContext) {\n        this.context = canvas.getContext('2d');\n        this.context.scale(this.pixelRatio, this.pixelRatio);\n      }\n    }\n\n    if (this.accept !== 'image/*') {\n      this.fileTypes = this.accept.split(',');\n      this.fileTypes = this.fileTypes.map(s => s.trim());\n    }\n\n    this.canvasWidth = this.width;\n    this.canvasHeight = this.height;\n    this.$on('error', this.onError);\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('resize', this.onResize);\n    this.$off('error', this.onError);\n  },\n\n  methods: {\n    updateStrings() {\n      for (let s in this.customStrings) {\n        if (s in this.strings && typeof this.customStrings[s] === 'string') {\n          this.strings[s] = this.customStrings[s];\n        }\n      }\n    },\n\n    onClick() {\n      if (!this.imageSelected) {\n        this.selectImage();\n        return;\n      }\n\n      if (this.changeOnClick) {\n        this.selectImage();\n      }\n\n      this.$emit('click');\n    },\n\n    onResize() {\n      this.resizeCanvas();\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject);\n      }\n    },\n\n    onDragStart() {\n      if (!this.supportsDragAndDrop) {\n        return;\n      }\n\n      this.draggingOver = true;\n    },\n\n    onDragStop() {\n      if (!this.supportsDragAndDrop) {\n        return;\n      }\n\n      this.draggingOver = false;\n    },\n\n    onFileDrop(e) {\n      this.onDragStop();\n      this.onFileChange(e);\n    },\n\n    onFileChange(e, prefill) {\n      let files = e.target.files || e.dataTransfer.files;\n\n      if (!files.length) {\n        return;\n      }\n\n      if (files[0].size <= 0 || files[0].size > this.size * 1024 * 1024) {\n        this.$emit('error', {\n          type: 'fileSize',\n          fileSize: files[0].size,\n          fileType: files[0].type,\n          fileName: files[0].name,\n          message: this.strings.fileSize + ' (' + this.size + 'MB)'\n        });\n        return;\n      }\n\n      if (files[0].name === this.fileName && files[0].size === this.fileSize && this.fileModified === files[0].lastModified) {\n        return;\n      }\n\n      this.file = files[0];\n      this.fileName = files[0].name;\n      this.fileSize = files[0].size;\n      this.fileModified = files[0].lastModified;\n      this.fileType = files[0].type;\n\n      if (this.accept === 'image/*') {\n        if (files[0].type.substr(0, 6) !== 'image/') {\n          return;\n        }\n      } else {\n        if (this.fileTypes.indexOf(files[0].type) === -1) {\n          this.$emit('error', {\n            type: 'fileType',\n            fileSize: files[0].size,\n            fileType: files[0].type,\n            fileName: files[0].name,\n            message: this.strings.fileType\n          });\n          return;\n        }\n      }\n\n      this.imageSelected = true;\n      this.image = '';\n\n      if (this.supportsPreview) {\n        this.loadImage(files[0], prefill || false);\n      } else {\n        if (prefill) {\n          this.$emit('prefill');\n        } else {\n          this.$emit('change', this.image);\n        }\n      }\n    },\n\n    onError(error) {\n      if (this.alertOnError) {\n        alert(error.message);\n      }\n    },\n\n    loadImage(file, prefill) {\n      this.getEXIFOrientation(file, orientation => {\n        this.setOrientation(orientation);\n        let reader = new FileReader();\n\n        reader.onload = e => {\n          this.image = e.target.result;\n\n          if (prefill) {\n            this.$emit('prefill');\n          } else {\n            this.$emit('change', this.image);\n          }\n\n          this.imageObject = new Image();\n\n          this.imageObject.onload = () => {\n            if (this.autoToggleAspectRatio) {\n              let canvasOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight);\n              let imageOrientation = this.getOrientation(this.imageObject.width, this.imageObject.height);\n\n              if (canvasOrientation !== imageOrientation) {\n                this.rotateCanvas();\n              }\n            }\n\n            this.drawImage(this.imageObject);\n          };\n\n          this.imageObject.src = this.image;\n        };\n\n        reader.readAsDataURL(file);\n      });\n    },\n\n    drawImage(image) {\n      this.imageWidth = image.width;\n      this.imageHeight = image.height;\n      this.imageRatio = image.width / image.height;\n      let offsetX = 0;\n      let offsetY = 0;\n      let scaledWidth = this.previewWidth;\n      let scaledHeight = this.previewHeight;\n      const previewRatio = this.previewWidth / this.previewHeight;\n\n      if (this.crop) {\n        if (this.imageRatio >= previewRatio) {\n          scaledWidth = scaledHeight * this.imageRatio;\n          offsetX = (this.previewWidth - scaledWidth) / 2;\n        } else {\n          scaledHeight = scaledWidth / this.imageRatio;\n          offsetY = (this.previewHeight - scaledHeight) / 2;\n        }\n      } else {\n        if (this.imageRatio >= previewRatio) {\n          scaledHeight = scaledWidth / this.imageRatio;\n          offsetY = (this.previewHeight - scaledHeight) / 2;\n        } else {\n          scaledWidth = scaledHeight * this.imageRatio;\n          offsetX = (this.previewWidth - scaledWidth) / 2;\n        }\n      }\n\n      const canvas = this.$refs.previewCanvas;\n      canvas.style.background = 'none';\n      canvas.width = this.previewWidth * this.pixelRatio;\n      canvas.height = this.previewHeight * this.pixelRatio;\n      this.context.setTransform(1, 0, 0, 1, 0, 0);\n      this.context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (this.rotate) {\n        this.context.translate(offsetX * this.pixelRatio, offsetY * this.pixelRatio);\n        this.context.translate(scaledWidth / 2 * this.pixelRatio, scaledHeight / 2 * this.pixelRatio);\n        this.context.rotate(this.rotate);\n        offsetX = -scaledWidth / 2;\n        offsetY = -scaledHeight / 2;\n      }\n\n      this.context.drawImage(image, offsetX * this.pixelRatio, offsetY * this.pixelRatio, scaledWidth * this.pixelRatio, scaledHeight * this.pixelRatio);\n    },\n\n    selectImage() {\n      this.$refs.fileInput.click();\n    },\n\n    removeImage() {\n      this.$refs.fileInput.value = '';\n      this.$refs.fileInput.type = '';\n      this.$refs.fileInput.type = 'file';\n      this.fileName = '';\n      this.fileType = '';\n      this.fileSize = 0;\n      this.fileModified = 0;\n      this.imageSelected = false;\n      this.image = '';\n      this.file = null;\n      this.imageObject = null;\n      this.$refs.previewCanvas.style.backgroundColor = 'rgba(200,200,200,.25)';\n      this.$refs.previewCanvas.width = this.previewWidth * this.pixelRatio;\n      this.$emit('remove');\n    },\n\n    rotateImage() {\n      this.rotateCanvas();\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject);\n      }\n\n      let newOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight);\n      this.$emit('aspectratiochange', newOrientation);\n    },\n\n    resizeCanvas() {\n      let previewRatio = this.canvasWidth / this.canvasHeight;\n      let newWidth = this.$refs.container.clientWidth;\n\n      if (!this.toggleAspectRatio && newWidth === this.containerWidth) {\n        return;\n      }\n\n      this.containerWidth = newWidth;\n      this.previewWidth = Math.min(this.containerWidth - this.margin * 2, this.canvasWidth);\n      this.previewHeight = this.previewWidth / previewRatio;\n    },\n\n    getOrientation(width, height) {\n      let orientation = 'square';\n\n      if (width > height) {\n        orientation = 'landscape';\n      } else if (width < height) {\n        orientation = 'portrait';\n      }\n\n      return orientation;\n    },\n\n    switchCanvasOrientation() {\n      const canvasWidth = this.canvasWidth;\n      const canvasHeight = this.canvasHeight;\n      this.canvasWidth = canvasHeight;\n      this.canvasHeight = canvasWidth;\n    },\n\n    rotateCanvas() {\n      this.switchCanvasOrientation();\n      this.resizeCanvas();\n    },\n\n    setOrientation(orientation) {\n      this.rotate = false;\n\n      if (orientation === 8) {\n        this.rotate = -Math.PI / 2;\n      } else if (orientation === 6) {\n        this.rotate = Math.PI / 2;\n      } else if (orientation === 3) {\n        this.rotate = -Math.PI;\n      }\n    },\n\n    getEXIFOrientation(file, callback) {\n      var reader = new FileReader();\n\n      reader.onload = e => {\n        var view = new DataView(e.target.result);\n\n        if (view.getUint16(0, false) !== 0xFFD8) {\n          return callback(-2);\n        }\n\n        var length = view.byteLength;\n        var offset = 2;\n\n        while (offset < length) {\n          var marker = view.getUint16(offset, false);\n          offset += 2;\n\n          if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) {\n              return callback(-1);\n            }\n\n            var little = view.getUint16(offset += 6, false) === 0x4949;\n            offset += view.getUint32(offset + 4, little);\n            var tags = view.getUint16(offset, little);\n            offset += 2;\n\n            for (var i = 0; i < tags; i++) {\n              if (view.getUint16(offset + i * 12, little) === 0x0112) {\n                return callback(view.getUint16(offset + i * 12 + 8, little));\n              }\n            }\n          } else if ((marker & 0xFF00) !== 0xFF00) {\n            break;\n          } else {\n            offset += view.getUint16(offset, false);\n          }\n        }\n\n        return callback(-1);\n      };\n\n      reader.readAsArrayBuffer(file.slice(0, 65536));\n    },\n\n    preloadImage(source, options) {\n      // ie 11 support\n      let File = window.File;\n\n      try {\n        new File([], ''); // eslint-disable-line\n      } catch (e) {\n        File = class File extends Blob {\n          constructor(chunks, filename, opts = {}) {\n            super(chunks, opts);\n            this.lastModifiedDate = new Date();\n            this.lastModified = +this.lastModifiedDate;\n            this.name = filename;\n          }\n\n        };\n      }\n\n      options = Object.assign({}, options);\n\n      if (typeof source === 'object') {\n        this.imageSelected = true;\n        this.image = '';\n\n        if (this.supportsPreview) {\n          this.loadImage(source, true);\n        } else {\n          this.$emit('prefill');\n        }\n\n        return;\n      }\n\n      let headers = new Headers();\n      headers.append('Accept', 'image/*');\n      fetch(source, {\n        method: 'GET',\n        mode: 'cors',\n        headers: headers\n      }).then(response => {\n        return response.blob();\n      }).then(imageBlob => {\n        let e = {\n          target: {\n            files: []\n          }\n        };\n        const fileName = options.fileName || source.split('/').slice(-1)[0];\n        let mediaType = options.mediaType || 'image/' + (options.fileType || fileName.split('.').slice(-1)[0]);\n        mediaType = mediaType.replace('jpg', 'jpeg');\n        e.target.files[0] = new File([imageBlob], fileName, {\n          type: mediaType\n        });\n        this.onFileChange(e, true);\n      }).catch(err => {\n        this.$emit('error', {\n          type: 'failedPrefill',\n          message: 'Failed loading prefill image: ' + err\n        });\n      });\n    }\n\n  },\n  computed: {\n    supportsUpload() {\n      if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\\/(1.0|2.0|2.5|3.0))/)) {\n        return false;\n      }\n\n      const el = document.createElement('input');\n      el.type = 'file';\n      return !el.disabled;\n    },\n\n    supportsPreview() {\n      return window.FileReader && !!window.CanvasRenderingContext2D;\n    },\n\n    supportsDragAndDrop() {\n      const div = document.createElement('div');\n      return ('draggable' in div || 'ondragstart' in div && 'ondrop' in div) && !('ontouchstart' in window || navigator.msMaxTouchPoints);\n    },\n\n    computedClasses() {\n      const classObject = {};\n      classObject['dragging-over'] = this.draggingOver;\n      return classObject;\n    },\n\n    fontSize() {\n      return Math.min(0.04 * this.previewWidth, 21) + 'px';\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","width","type","String","Number","default","MAX_SAFE_INTEGER","height","margin","accept","size","id","buttonClass","removeButtonClass","aspectButtonClass","prefill","File","prefillOptions","Object","crop","Boolean","radius","removable","hideChangeButton","autoToggleAspectRatio","toggleAspectRatio","changeOnClick","plain","zIndex","alertOnError","customStrings","watch","preloadImage","removeImage","data","imageSelected","previewHeight","previewWidth","draggingOver","canvasWidth","canvasHeight","strings","upload","drag","tap","change","aspect","remove","select","selected","fileSize","fileType","mounted","updateStrings","$nextTick","window","addEventListener","onResize","supportsPreview","pixelRatio","Math","round","devicePixelRatio","screen","deviceXDPI","logicalXDPI","canvas","$refs","previewCanvas","getContext","context","scale","fileTypes","split","map","s","trim","$on","onError","beforeDestroy","removeEventListener","$off","methods","onClick","selectImage","$emit","resizeCanvas","imageObject","drawImage","onDragStart","supportsDragAndDrop","onDragStop","onFileDrop","e","onFileChange","files","target","dataTransfer","length","fileName","message","fileModified","lastModified","file","substr","indexOf","image","loadImage","error","alert","getEXIFOrientation","orientation","setOrientation","reader","FileReader","onload","result","Image","canvasOrientation","getOrientation","imageOrientation","rotateCanvas","src","readAsDataURL","imageWidth","imageHeight","imageRatio","offsetX","offsetY","scaledWidth","scaledHeight","previewRatio","style","background","setTransform","clearRect","rotate","translate","fileInput","click","value","backgroundColor","rotateImage","newOrientation","newWidth","container","clientWidth","containerWidth","min","switchCanvasOrientation","PI","callback","view","DataView","getUint16","byteLength","offset","marker","getUint32","little","tags","i","readAsArrayBuffer","slice","source","options","Blob","constructor","chunks","filename","opts","lastModifiedDate","Date","assign","headers","Headers","append","fetch","method","mode","then","response","blob","imageBlob","mediaType","replace","catch","err","computed","supportsUpload","navigator","userAgent","match","el","document","createElement","disabled","CanvasRenderingContext2D","div","msMaxTouchPoints","computedClasses","classObject","fontSize"],"sourceRoot":"","sources":["C:\\Users\\draga\\OneDrive\\Dokumenti\\MRS-ISA-PROJEKAT\\mrs-isa-projekat\\projekat\\src\\frontend\\node_modules\\vue-picture-input\\PictureInput.vue"],"sourcesContent":["<template>\n  <div ref=\"container\" id=\"picture-input\" class=\"picture-input\">\n    <div v-if=\"!supportsUpload\" v-html=\"strings.upload\"></div>\n    <div v-else-if=\"supportsPreview\">\n      <div class=\"preview-container\"\n        :style=\"{maxWidth: previewWidth + 'px', height: previewHeight + 'px', borderRadius: radius + '%'}\">\n          <canvas ref=\"previewCanvas\"\n            class=\"picture-preview\"\n            :class=\"computedClasses\"\n            @drag.stop.prevent=\"\"\n            @dragover.stop.prevent=\"\"\n            @dragstart.stop.prevent=\"onDragStart\"\n            @dragenter.stop.prevent=\"onDragStart\"\n            @dragend.stop.prevent=\"onDragStop\"\n            @dragleave.stop.prevent=\"onDragStop\"\n            @drop.stop.prevent=\"onFileDrop\"\n            @click.prevent=\"onClick\"\n            :style=\"{height: previewHeight + 'px', zIndex: zIndex + 1 }\">\n          </canvas>\n        <div v-if=\"!imageSelected && !plain\"\n          class=\"picture-inner\"\n            :style=\"{top: -previewHeight + 'px', marginBottom: -previewHeight + 'px', fontSize: fontSize, borderRadius: radius + '%', zIndex: zIndex + 2}\">\n          <span v-if=\"supportsDragAndDrop\" class=\"picture-inner-text\" v-html=\"strings.drag\"></span>\n          <span v-else class=\"picture-inner-text\" v-html=\"strings.tap\"></span>\n        </div>\n      </div>\n      <button v-if=\"imageSelected && !hideChangeButton\" @click.prevent=\"selectImage\" :class=\"buttonClass\">{{ strings.change }}</button>\n      <button v-if=\"imageSelected && removable\" @click.prevent=\"removeImage\" :class=\"removeButtonClass\">{{ strings.remove }}</button>\n      <button v-if=\"imageSelected && toggleAspectRatio && width !== height\" @click.prevent=\"rotateImage\" :class=\"aspectButtonClass\">{{ strings.aspect }}</button>\n    </div>\n    <div v-else>\n      <button v-if=\"!imageSelected\" @click.prevent=\"selectImage\" :class=\"buttonClass\">{{ strings.select }}</button>\n      <div v-else>\n        <div v-html=\"strings.selected\"></div>\n        <button v-if=\"!hideChangeButton\" @click.prevent=\"selectImage\" :class=\"buttonClass\">{{ strings.change }}</button>\n        <button v-if=\"removable\" @click.prevent=\"removeImage\" :class=\"removeButtonClass\">{{ strings.remove }}</button>\n      </div>\n    </div>\n    <input ref=\"fileInput\" type=\"file\" :name=\"name\" :id=\"id\" :accept=\"accept\" @change=\"onFileChange\">\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'picture-input',\n  props: {\n    width: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    height: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    margin: {\n      type: [String, Number],\n      default: 0\n    },\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    size: {\n      type: [String, Number],\n      default: Number.MAX_SAFE_INTEGER\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    id: {\n      type: [String, Number],\n      default: null\n    },\n    buttonClass: {\n      type: String,\n      default: 'btn btn-primary button'\n    },\n    removeButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    aspectButtonClass: {\n      type: String,\n      default: 'btn btn-secondary button secondary'\n    },\n    prefill: {\n      type: [String, File],\n      default: ''\n    },\n    prefillOptions: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    crop: {\n      type: Boolean,\n      default: true\n    },\n    radius: {\n      type: [String, Number],\n      default: 0\n    },\n    removable: {\n      type: Boolean,\n      default: false\n    },\n    hideChangeButton: {\n      type: Boolean,\n      default: false\n    },\n    autoToggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    toggleAspectRatio: {\n      type: Boolean,\n      default: false\n    },\n    changeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 10000\n    },\n    alertOnError: {\n      type: Boolean,\n      default: true\n    },\n    customStrings: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  watch: {\n    prefill () {\n      if (this.prefill) {\n        this.preloadImage(this.prefill, this.prefillOptions)\n      } else {\n        this.removeImage()\n      }\n    }\n  },\n  data () {\n    return {\n      imageSelected: false,\n      previewHeight: 0,\n      previewWidth: 0,\n      draggingOver: false,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      strings: {\n        upload: '<p>Your device does not support file uploading.</p>',\n        drag: 'Drag an image or <br>click here to select a file',\n        tap: 'Tap here to select a photo <br>from your gallery',\n        change: 'Change Photo',\n        aspect: 'Landscape/Portrait',\n        remove: 'Remove Photo',\n        select: 'Select a Photo',\n        selected: '<p>Photo successfully selected!</p>',\n        fileSize: 'The file size exceeds the limit',\n        fileType: 'This file type is not supported.'\n      }\n    }\n  },\n  mounted () {\n    this.updateStrings()\n    if (this.prefill) {\n      this.preloadImage(this.prefill, this.prefillOptions)\n    }\n\n    this.$nextTick(() => {\n      window.addEventListener('resize', this.onResize)\n      this.onResize()\n    })\n    if (this.supportsPreview) {\n      this.pixelRatio = Math.round(window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI)\n      const canvas = this.$refs.previewCanvas\n      if (canvas.getContext) {\n        this.context = canvas.getContext('2d')\n        this.context.scale(this.pixelRatio, this.pixelRatio)\n      }\n    }\n    if (this.accept !== 'image/*') {\n      this.fileTypes = this.accept.split(',')\n      this.fileTypes = this.fileTypes.map(s => s.trim())\n    }\n\n    this.canvasWidth = this.width\n    this.canvasHeight = this.height\n\n    this.$on('error', this.onError)\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.onResize)\n    this.$off('error', this.onError)\n  },\n  methods: {\n    updateStrings () {\n      for (let s in this.customStrings) {\n        if (s in this.strings && typeof this.customStrings[s] === 'string') {\n          this.strings[s] = this.customStrings[s]\n        }\n      }\n    },\n    onClick () {\n      if (!this.imageSelected) {\n        this.selectImage()\n        return\n      }\n\n      if (this.changeOnClick) {\n        this.selectImage()\n      }\n\n      this.$emit('click')\n    },\n    onResize () {\n      this.resizeCanvas()\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject)\n      }\n    },\n    onDragStart () {\n      if (!this.supportsDragAndDrop) {\n        return\n      }\n      this.draggingOver = true\n    },\n    onDragStop () {\n      if (!this.supportsDragAndDrop) {\n        return\n      }\n      this.draggingOver = false\n    },\n    onFileDrop (e) {\n      this.onDragStop()\n      this.onFileChange(e)\n    },\n    onFileChange (e, prefill) {\n      let files = e.target.files || e.dataTransfer.files\n      if (!files.length) {\n        return\n      }\n      if (files[0].size <= 0 || files[0].size > this.size * 1024 * 1024) {\n        this.$emit('error', {\n          type: 'fileSize',\n          fileSize: files[0].size,\n          fileType: files[0].type,\n          fileName: files[0].name,\n          message: this.strings.fileSize + ' (' + this.size + 'MB)'\n        })\n        return\n      }\n      if (files[0].name === this.fileName && files[0].size === this.fileSize && this.fileModified === files[0].lastModified) {\n        return\n      }\n\n      this.file = files[0]\n      this.fileName = files[0].name\n      this.fileSize = files[0].size\n      this.fileModified = files[0].lastModified\n      this.fileType = files[0].type\n\n      if (this.accept === 'image/*') {\n        if (files[0].type.substr(0, 6) !== 'image/') {\n          return\n        }\n      } else {\n        if (this.fileTypes.indexOf(files[0].type) === -1) {\n          this.$emit('error', {\n            type: 'fileType',\n            fileSize: files[0].size,\n            fileType: files[0].type,\n            fileName: files[0].name,\n            message: this.strings.fileType\n          })\n          return\n        }\n      }\n      this.imageSelected = true\n      this.image = ''\n      if (this.supportsPreview) {\n        this.loadImage(files[0], prefill || false)\n      } else {\n        if (prefill) {\n          this.$emit('prefill')\n        } else {\n          this.$emit('change', this.image)\n        }\n      }\n    },\n    onError (error) {\n      if (this.alertOnError) {\n        alert(error.message)\n      }\n    },\n    loadImage (file, prefill) {\n      this.getEXIFOrientation(file, orientation => {\n        this.setOrientation(orientation)\n        let reader = new FileReader()\n        reader.onload = e => {\n          this.image = e.target.result\n          if (prefill) {\n            this.$emit('prefill')\n          } else {\n            this.$emit('change', this.image)\n          }\n          this.imageObject = new Image()\n          this.imageObject.onload = () => {\n            if (this.autoToggleAspectRatio) {\n              let canvasOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight)\n              let imageOrientation = this.getOrientation(this.imageObject.width, this.imageObject.height)\n              if (canvasOrientation !== imageOrientation) {\n                this.rotateCanvas()\n              }\n            }\n            this.drawImage(this.imageObject)\n          }\n          this.imageObject.src = this.image\n        }\n        reader.readAsDataURL(file)\n      })\n    },\n    drawImage (image) {\n      this.imageWidth = image.width\n      this.imageHeight = image.height\n      this.imageRatio = image.width / image.height\n      let offsetX = 0\n      let offsetY = 0\n      let scaledWidth = this.previewWidth\n      let scaledHeight = this.previewHeight\n      const previewRatio = this.previewWidth / this.previewHeight\n      if (this.crop) {\n        if (this.imageRatio >= previewRatio) {\n          scaledWidth = scaledHeight * this.imageRatio\n          offsetX = (this.previewWidth - scaledWidth) / 2\n        } else {\n          scaledHeight = scaledWidth / this.imageRatio\n          offsetY = (this.previewHeight - scaledHeight) / 2\n        }\n      } else {\n        if (this.imageRatio >= previewRatio) {\n          scaledHeight = scaledWidth / this.imageRatio\n          offsetY = (this.previewHeight - scaledHeight) / 2\n        } else {\n          scaledWidth = scaledHeight * this.imageRatio\n          offsetX = (this.previewWidth - scaledWidth) / 2\n        }\n      }\n      const canvas = this.$refs.previewCanvas\n      canvas.style.background = 'none'\n      canvas.width = this.previewWidth * this.pixelRatio\n      canvas.height = this.previewHeight * this.pixelRatio\n      this.context.setTransform(1, 0, 0, 1, 0, 0)\n      this.context.clearRect(0, 0, canvas.width, canvas.height)\n      if (this.rotate) {\n        this.context.translate(offsetX * this.pixelRatio, offsetY * this.pixelRatio)\n        this.context.translate(scaledWidth / 2 * this.pixelRatio, scaledHeight / 2 * this.pixelRatio)\n        this.context.rotate(this.rotate)\n        offsetX = -scaledWidth / 2\n        offsetY = -scaledHeight / 2\n      }\n      this.context.drawImage(image,\n        offsetX * this.pixelRatio,\n        offsetY * this.pixelRatio,\n        scaledWidth * this.pixelRatio,\n        scaledHeight * this.pixelRatio)\n    },\n    selectImage () {\n      this.$refs.fileInput.click()\n    },\n    removeImage () {\n      this.$refs.fileInput.value = ''\n      this.$refs.fileInput.type = ''\n      this.$refs.fileInput.type = 'file'\n      this.fileName = ''\n      this.fileType = ''\n      this.fileSize = 0\n      this.fileModified = 0\n      this.imageSelected = false\n      this.image = ''\n      this.file = null\n      this.imageObject = null\n      this.$refs.previewCanvas.style.backgroundColor = 'rgba(200,200,200,.25)'\n      this.$refs.previewCanvas.width = this.previewWidth * this.pixelRatio\n      this.$emit('remove')\n    },\n    rotateImage () {\n      this.rotateCanvas()\n\n      if (this.imageObject) {\n        this.drawImage(this.imageObject)\n      }\n\n      let newOrientation = this.getOrientation(this.canvasWidth, this.canvasHeight)\n      this.$emit('aspectratiochange', newOrientation)\n    },\n    resizeCanvas () {\n      let previewRatio = this.canvasWidth / this.canvasHeight\n      let newWidth = this.$refs.container.clientWidth\n      if (!this.toggleAspectRatio && newWidth === this.containerWidth) {\n        return\n      }\n      this.containerWidth = newWidth\n      this.previewWidth = Math.min(this.containerWidth - this.margin * 2, this.canvasWidth)\n      this.previewHeight = this.previewWidth / previewRatio\n    },\n    getOrientation (width, height) {\n      let orientation = 'square'\n\n      if (width > height) {\n        orientation = 'landscape'\n      } else if (width < height) {\n        orientation = 'portrait'\n      }\n\n      return orientation\n    },\n    switchCanvasOrientation () {\n      const canvasWidth = this.canvasWidth\n      const canvasHeight = this.canvasHeight\n\n      this.canvasWidth = canvasHeight\n      this.canvasHeight = canvasWidth\n    },\n    rotateCanvas () {\n      this.switchCanvasOrientation()\n      this.resizeCanvas()\n    },\n    setOrientation (orientation) {\n      this.rotate = false\n      if (orientation === 8) {\n        this.rotate = -Math.PI / 2\n      } else if (orientation === 6) {\n        this.rotate = Math.PI / 2\n      } else if (orientation === 3) {\n        this.rotate = -Math.PI\n      }\n    },\n    getEXIFOrientation (file, callback) {\n      var reader = new FileReader()\n      reader.onload = e => {\n        var view = new DataView(e.target.result)\n        if (view.getUint16(0, false) !== 0xFFD8) {\n          return callback(-2)\n        }\n        var length = view.byteLength\n        var offset = 2\n        while (offset < length) {\n          var marker = view.getUint16(offset, false)\n          offset += 2\n          if (marker === 0xFFE1) {\n            if (view.getUint32(offset += 2, false) !== 0x45786966) {\n              return callback(-1)\n            }\n            var little = view.getUint16(offset += 6, false) === 0x4949\n            offset += view.getUint32(offset + 4, little)\n            var tags = view.getUint16(offset, little)\n            offset += 2\n            for (var i = 0; i < tags; i++) {\n              if (view.getUint16(offset + (i * 12), little) === 0x0112) {\n                return callback(view.getUint16(offset + (i * 12) + 8, little))\n              }\n            }\n          } else if ((marker & 0xFF00) !== 0xFF00) {\n            break\n          } else {\n            offset += view.getUint16(offset, false)\n          }\n        }\n        return callback(-1)\n      }\n      reader.readAsArrayBuffer(file.slice(0, 65536))\n    },\n    preloadImage (source, options) {\n      // ie 11 support\n      let File = window.File\n      try {\n        new File([], '') // eslint-disable-line\n      } catch (e) {\n        File = class File extends Blob {\n          constructor (chunks, filename, opts = {}) {\n            super(chunks, opts)\n            this.lastModifiedDate = new Date()\n            this.lastModified = +this.lastModifiedDate\n            this.name = filename\n          }\n        }\n      }\n      options = Object.assign({}, options)\n      if (typeof source === 'object') {\n        this.imageSelected = true\n        this.image = ''\n        if (this.supportsPreview) {\n          this.loadImage(source, true)\n        } else {\n          this.$emit('prefill')\n        }\n        return\n      }\n      let headers = new Headers()\n      headers.append('Accept', 'image/*')\n      fetch(source, {\n        method: 'GET',\n        mode: 'cors',\n        headers: headers\n      }).then(response => {\n        return response.blob()\n      })\n      .then(imageBlob => {\n        let e = { target: { files: [] } }\n        const fileName = options.fileName || source.split('/').slice(-1)[0]\n        let mediaType = options.mediaType || ('image/' + (options.fileType || fileName.split('.').slice(-1)[0]))\n        mediaType = mediaType.replace('jpg', 'jpeg')\n        e.target.files[0] = new File([imageBlob], fileName, { type: mediaType })\n        this.onFileChange(e, true)\n      })\n      .catch(err => {\n        this.$emit('error', {\n          type: 'failedPrefill',\n          message: 'Failed loading prefill image: ' + err\n        })\n      })\n    }\n  },\n  computed: {\n    supportsUpload () {\n      if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\\/(1.0|2.0|2.5|3.0))/)) {\n        return false\n      }\n      const el = document.createElement('input')\n      el.type = 'file'\n      return !el.disabled\n    },\n    supportsPreview () {\n      return window.FileReader && !!window.CanvasRenderingContext2D\n    },\n    supportsDragAndDrop () {\n      const div = document.createElement('div')\n      return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && !('ontouchstart' in window || navigator.msMaxTouchPoints)\n    },\n    computedClasses () {\n      const classObject = {}\n      classObject['dragging-over'] = this.draggingOver\n      return classObject\n    },\n    fontSize () {\n      return Math.min(0.04 * this.previewWidth, 21) + 'px'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.picture-input {\n  width: 100%;\n  margin: 0 auto;\n  text-align: center;\n}\n.preview-container {\n  width: 100%;\n  box-sizing: border-box;\n  margin: 0 auto;\n  cursor: pointer;\n  overflow: hidden;\n}\n.picture-preview {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 10001;\n  box-sizing: border-box;\n  background-color: rgba(200,200,200,.25);\n}\n.picture-preview.dragging-over {\n  filter: brightness(0.5);\n}\n.picture-inner {\n  position: relative;\n  z-index: 10002;\n  pointer-events: none;\n  box-sizing: border-box;\n  margin: 1em auto;\n  padding: 0.5em;\n  border: .3em dashed rgba(66,66,66,.15);\n  border-radius: 8px;\n  width: calc(100% - 2.5em);\n  height: calc(100% - 2.5em);\n  display: table;\n}\n.picture-inner .picture-inner-text {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  font-size: 2em;\n  line-height: 1.5;\n}\nbutton {\n  margin: 1em .25em;\n  cursor: pointer;\n}\ninput[type=file] {\n  display: none;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}