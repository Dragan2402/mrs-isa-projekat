{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  align: \"center\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.newPassword = $event),\n    placeholder: \"New password\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.newPassword]]), _hoisted_3, _hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.confirmPassword = $event),\n    placeholder: \"Confirm password\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.confirmPassword]]), _hoisted_5, _hoisted_6, _createElementVNode(\"button\", {\n    class: \"btn btn-primary\",\n    onClick: _cache[2] || (_cache[2] = $event => $options.setNewPassword())\n  }, \"Set new password\")]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;gCACTC,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;gCAEAA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;gCAAIA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;gCAEJA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;gCAAIA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;uBALNC,oBAQM,KARN,cAQM,CAPJC,UAOI,kBANJF,oBAAwE,OAAxE,EAAwE;AAAjEG,QAAI,EAAC,UAA4D;+DAAxCC,mBAAWC,OAA6B;AAA3BC,eAAW,EAAC;AAAe,GAAxE;;AAAA,oBAAgCF,mBAM5B,EALJG,UAKI,EALAC,UAKA,kBAJJR,oBAAgF,OAAhF,EAAgF;AAAzEG,QAAI,EAAC,UAAoE;+DAAhDC,uBAAeC,OAAiC;AAA/BC,eAAW,EAAC;AAAmB,GAAhF;;AAAA,oBAAgCF,uBAI5B,EAHJK,UAGI,EAHAC,UAGA,EAFJV,oBAAmF,QAAnF,EAAmF;AAA3EW,SAAK,EAAC,iBAAqE;AAAlDC,WAAK,sCAAEC,yBAAF;AAA6C,GAAnF,EAA0D,kBAA1D,CAEI,CARN","names":["align","_createElementVNode","_createElementBlock","_hoisted_2","type","_ctx","$event","placeholder","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","class","onClick","$options"],"sourceRoot":"","sources":["C:\\Users\\draga\\OneDrive\\Dokumenti\\MRS-ISA-PROJEKAT\\mrs-isa-projekat\\projekat\\src\\frontend\\src\\components\\NewPasswordPage.vue"],"sourcesContent":["<template>\r\n  <div align='center'>\r\n    <br>\r\n    <input type=\"password\" v-model=\"newPassword\" placeholder=\"New password\">\r\n    <br><br>\r\n    <input type=\"password\" v-model=\"confirmPassword\" placeholder=\"Confirm password\">\r\n    <br><br>\r\n    <button class=\"btn btn-primary\" @click=\"setNewPassword()\">Set new password</button>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\"\r\nexport default {\r\n  name: \"newPasswordPage\",\r\n  data: () => {\r\n    return {\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n      token:\"\",\r\n    };\r\n  },\r\n  mounted(){\r\n    this.token=this.$route.params.token;\r\n  },\r\n  methods:{\r\n    setNewPassword(){\r\n      var passwordRegex=/^[0-9A-Za-z]+$/;\r\n\r\n      if(this.newPassword.length<5 || this.newPassword.length > 20){\r\n        this.$toast.error(\"Password must be between 5-20 characters\");\r\n        return;\r\n      }\r\n      if(!passwordRegex.test(this.newPassword)){\r\n        this.$toast.error(\"Password must only contain letters and numbers\");\r\n        return;\r\n      }\r\n      if(this.newPassword !== this.confirmPassword){\r\n        this.$toast.error(\"Passwords must match\");\r\n        return;\r\n      }\r\n      const passwordResetDTO={\r\n        \"token\":this.token,\r\n        \"newPassword\":this.newPassword,\r\n        \"confirmPassword\":this.confirmPassword\r\n      }\r\n\r\n      axios.put(\"/api/auth/resetPassword\",passwordResetDTO).then(response =>{\r\n        if(response.data==true){\r\n          this.$toast.success(\"Password changed successfully\");\r\n          this.$router.push(\"/loginPage\");\r\n        }else{\r\n          this.$toast.error(\"Error\");\r\n          \r\n        }\r\n      })\r\n\r\n      \r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}